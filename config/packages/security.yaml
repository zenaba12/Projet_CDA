security:
  #  Configuration des hashers de mot de passe (pour chiffrer les mots de passe)
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: auto # Symfony choisit l'algorithme automatiquement (bcrypt ou argon2)
      cost: 15 # Niveau de complexité du hashage

  #  Configuration du fournisseur d'utilisateurs (récupération des utilisateurs)
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User # Indique que les utilisateurs proviennent de l'entité User
        property: mail #  Vérifie que "mail" correspond bien au champ dans ta BDD

  #  Définition des firewalls (zones de protection des routes)
  firewalls:
    #  Firewall pour le développement (profiler, assets statiques)
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false #  Désactivation de la sécurité sur ces routes

    #  Firewall principal pour le site
    main:
      pattern: ^/ #  Couvre toutes les routes de l'application
      provider: app_user_provider #  Utilise l'entité User
      form_login: #  Connexion via formulaire
        login_path: app_login #  Route du formulaire de connexion
        check_path: /login #  Route pour vérifier l'identité
        default_target_path: /users #  Page après connexion réussie
      logout:
        path: /logout #  Route pour se déconnecter

    # Firewall pour l'API (Authentification JSON)
    api_login:
      pattern: ^/api/login
      stateless: true #  Pas de session gérée, tout se fait via tokens JWT
      provider: app_user_provider
      json_login:
        check_path: /api/login #  Route pour envoyer les identifiants
        success_handler: lexik_jwt_authentication.handler.authentication_success #  Gère la réponse en cas de succès
        failure_handler: lexik_jwt_authentication.handler.authentication_failure #  Gère la réponse en cas d'échec

    #  Firewall pour sécuriser les routes API après connexion
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~ #  Active la protection JWT pour ces routes

  #  Contrôle d'accès aux routes (définition des permissions)
  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS } #  Permet à tout le monde d'accéder au login API
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY } #  Nécessite un JWT pour accéder aux autres routes API
    - { path: ^/users/new, roles: PUBLIC_ACCESS } #  L'inscription est publique
    - { path: ^/users, roles: IS_AUTHENTICATED_FULLY } #  Les utilisateurs connectés peuvent voir les profils
    - { path: ^/admin, roles: ROLE_ADMIN } #  Seuls les admins peuvent accéder à l'administration
